<?xml version="1.0" encoding="UTF-8"?>

<!--L
  Copyright SAIC and Capability Plus solutions

  Distributed under the OSI-approved BSD 3-Clause License.
  See http://ncip.github.com/cagrid-iphone-app/LICENSE.txt for details.
L-->

<!--************************************************************************
* This is the top-level build file for the project. It creates a local copy 
* of the caCORE SDK, copies this project's custom file versions over top of 
* it and then calls the build-project.xml ant script to actually build the 
* system. 
*************************************************************************-->
        
<project name="gss" default="build-system" basedir=".">
    
    <description>Build script for the Grid Summary Service</description>
    	
    <property name="anthill.dependency.artifacts.dir" value=".."/>
    <property name="sdk.home.dir" value="${anthill.dependency.artifacts.dir}/cacoresdk" />
    <property name="project.home.dir" value="." />
    <property name="test.dir" value="${project.home.dir}/test" />
    
    <property name="tier" value="dev" />
    <property name="build.properties" value="${tier}.properties"/>

	<property file="${build.properties}"/>
    <property file="${project.home.dir}/conf/deploy.properties"  />
    
    <target name="help" 
            description="Lists commonly used targets">
        <echo>========================</echo>
        <echo>Grid Summary Service Build Script</echo>
        <echo>========================</echo>
        <echo>ant clean        - Remove generated build artifacts</echo>
        <echo>ant build-system - Build entire system</echo>
        <echo>ant dist-zips    - Create distribution zips</echo>
    </target>

    <property name="project.build.dir" value="${project.home.dir}/build" />
    <property name="project.output.dir" value="${project.home.dir}/output" />
    <property name="project.sourcedist.dir" value="${project.output.dir}/gssapi" />
    <property name="project.javaclientdist.dir" value="${project.output.dir}/remote-client" />
    <property name="project.wsclientdist.dir" value="${project.output.dir}/ws-client" />
    <property name="project.javadoc.dir" value="${project.output.dir}/docs" />

    <property name="project.warfile" value="${project.output.dir}/webapp/${PROJECT_NAME}.war" />
    
    <property name="project.sourcedist" value="${PROJECT_NAME}_source" />
    <property name="project.javaclientdist" value="${PROJECT_NAME}_java_client" />
    <property name="project.wsclientdist" value="${PROJECT_NAME}_ws_client" />
    <property name="project.javadoc" value="${PROJECT_NAME}_javadocs" />
   
    <condition property="project.ready">
        <available file="${project.build.dir}/build.xml"/>
    </condition>

    <condition property="webapp.ready">
        <available file="${project.warfile}"/>
    </condition>

    <target name="clean" 
            description="Removes generated files">
        <delete dir="${project.build.dir}" quiet="true"/>
        <delete dir="${project.output.dir}" quiet="true"/>
    </target>

	<!-- add a dependency on tag-build when this is in SVN -->
    <target name="build-system" depends="create-build"
            description="Generate the entire system">

        <ant antfile="build-project.xml" inheritAll="false"/>
            
    </target>
	
    <target name="create-build">
        <antcall target="load-sdk" />
        <antcall target="load-project" />
    </target>

    <target name="load-sdk" unless="project.ready"
            description="Make a local copy of the SDK">

        <mkdir dir="${project.build.dir}"/>
        <mkdir dir="${project.build.dir}/models"/>
        <mkdir dir="${project.build.dir}/models/database-scripts"/>
    
        <copy todir="${project.build.dir}">
            <fileset dir="${sdk.home.dir}">
                <include name="build.*" />
                <include name="build-scripts/**/*" />
                <include name="codegen/**/*" />
                <include name="conf/**/*" />
                <include name="system/**/*" />
                <include name="grid/**/*" />
                <include name="writable-api/**/*" />
            </fileset>
        </copy>
        
    </target>

    <target name="load-project" 
            description="Copy the project's custom conf files and model over the SDK">

        <!-- copy model -->
        <copy todir="${project.build.dir}/models" overwrite="true">
            <fileset dir="${project.home.dir}/models">
                <include name="*.xmi" />
            </fileset>
        </copy>
            
        <!-- copy codegen templates -->
        <copy todir="${project.build.dir}/codegen" overwrite="true">
            <fileset dir="${project.home.dir}/codegen">
                <include name="**/*" />
            </fileset>
        </copy>
        
        <!-- copy configuration -->
        <copy todir="${project.build.dir}/conf" overwrite="true">
            <fileset dir="${project.home.dir}/conf">
                <include name="**/*" />
                <exclude name="local.properties" />
            </fileset>
        </copy>

        <!-- replace with values from <tier>.properties -->
        <replace dir="${project.build.dir}/conf">
            <include name="deploy.properties"/>
            <include name="gss_ehcache.xml"/>
            <replacefilter token="@GSS_CONTENT_DIR@" value="${gss.content.dir}" />
            <replacefilter token="@DB_CONNECTION_URL@" value="${gss.database.url}" />
            <replacefilter token="@DB_USERNAME@" value="${gss.database.username}" />
            <replacefilter token="@DB_PASSWORD@" value="${gss.database.password}" />
        </replace>
        
        <replace dir="${project.build.dir}/conf">
            <include name="gss.properties"/>
            <replacefilter token="@CAB2B_QUERY_URL@" value="${cab2b.query.url}" />
            <replacefilter token="@HOST_IMAGE_DIR@" value="${host.image.dir}" />
            <replacefilter token="@GRID_INDEX_URL@" value="${grid.index.url}" />
        </replace>
    	
        <!-- copy SDK configuration -->
        <copy todir="${project.build.dir}" overwrite="true">
            <fileset dir="${project.home.dir}/conf">
                <include name="local.properties" />
            </fileset>
        </copy>
                    
        <!-- copy system -->
        <copy todir="${project.build.dir}/system" overwrite="true">
            <fileset dir="${project.home.dir}/system">
                <include name="**/*" />
            </fileset>
        </copy>

    </target>

    <target name="tag-build" 
            description="Populates the version.properties for this build">

        <exec executable="svn" output="${project.build.dir}/svninfo.xml">
            <arg value="info"/>
            <arg value="--xml"/>
        </exec>
    	
        <xmlproperty file="${project.build.dir}/svninfo.xml" collapseattributes="true"/>
    	
    	<tstamp>
    	   <format property="timestamp" pattern="yyyy-MM-dd HH:mm:ss" />
    	</tstamp>

        <echo file="${project.build.dir}/version.properties" 
            message="build.version=${DISPLAY_VERSION}${line.separator}"/>
        	
        <echo file="${project.build.dir}/version.properties" append="true"
        	message="build.version.webapp=${WEBAPP_VERSION}${line.separator}"/>
    	
        <echo file="${project.build.dir}/version.properties" append="true"
            message="build.svn.url=${info.entry.url}${line.separator}"/>
        	
        <echo file="${project.build.dir}/version.properties" append="true"
            message="build.svn.revision=${info.entry.revision}${line.separator}"/>
        	
        <echo file="${project.build.dir}/version.properties" append="true"
            message="build.date=${timestamp}"/>
    	
    </target>
      
    
    <target name="dist-zips" 
        description="Creates all the distribution zips">

        <delete>
            <fileset dir="${project.output.dir}" includes="*.zip"/>
        </delete>
    	
        <zip destfile="${project.output.dir}/${project.javaclientdist}.zip">
            <zipfileset prefix="${project.javaclientdist}" 
                dir="${project.javaclientdist.dir}"/>
        </zip>

        <zip destfile="${project.output.dir}/${project.wsclientdist}.zip">
            <zipfileset prefix="${project.wsclientdist}" 
                dir="${project.wsclientdist.dir}"/>
        </zip>
        
        <zip destfile="${project.output.dir}/${project.javadoc}.zip">
            <zipfileset prefix="${project.javadoc}" 
                dir="${project.javadoc.dir}"/>
        </zip>

    </target>
    
</project>
